package ch.hslu.wipro.micros.warehousemanagement.repository;

import ch.hslu.wipro.micros.warehousemanagement.dto.ArticleDto;
import ch.hslu.wipro.micros.warehousemanagement.dto.ArticleDtoBuilder;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Random;

public class ArticleRepositoryManager {
    private final ArticleRepository articleRepository;

    public ArticleRepositoryManager(ArticleRepository articleRepository) {
        this.articleRepository = articleRepository;
    }

    public void generateRandomInventory(int amount) {
        Random random = new Random();
        String articleName = "article";

        int i = 0;
        while (i < amount) {
            double rndPrice = randomDouble(random,1, 50);
            int rndQuantity = randomInteger(random,0, 50);

            ArticleDto articleDto = new ArticleDtoBuilder()
                    .atName(articleName + i)
                    .atDescription("automatically generated by warehousemanagement")
                    .atPrice(roundToNearest5Cents(BigDecimal.valueOf(rndPrice)))
                    .atQuantity(rndQuantity)
                    .build();

            articleRepository.create(articleDto);
            i++;
        }
    }

    public void generateDeterministicInventory(int amount) {
        String articleName = "article";

        int i = 0;
        while (i < amount) {
            double rndPrice = 12.50;
            int rndQuantity = 50;

            ArticleDto articleDto = new ArticleDtoBuilder()
                    .atName(articleName + i)
                    .atDescription("automatically generated by warehousemanagement")
                    .atPrice(BigDecimal.valueOf(rndPrice).setScale(2, BigDecimal.ROUND_HALF_UP))
                    .atQuantity(rndQuantity)
                    .build();

            articleRepository.create(articleDto);
            i++;
        }
    }

    private static BigDecimal roundToNearest5Cents(final BigDecimal value) {
        return value.setScale(2, RoundingMode.FLOOR).multiply(new BigDecimal(20)).add(new BigDecimal("0.5"))
                .setScale(0, RoundingMode.FLOOR).divide(new BigDecimal(20)).setScale(2, RoundingMode.FLOOR);
    }

    private double randomDouble(Random r, int rangeMin, int rangeMax) {
        return rangeMin + (rangeMax - rangeMin) * r.nextDouble();
    }

    private int randomInteger(Random r, int rangeMin, int rangeMax) {
        return r.nextInt((rangeMax - rangeMin) + 1) + rangeMin;
    }
}
